#
# --- IDEA: Crazy idea? (the gist of it)
# Completely define a layout config using Nix and the module system...
# Each key would be a attrset describing its action (potentially complex, composite, composable),
# that would be implemented by a set of hidden functions generated by this specific config...
#
{
  description = "Try! Build Moonlander keyboard (to be flashed with Wally)";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-22.05";
  };

  outputs = { self, nixpkgs }:
  let
    pkgs = import nixpkgs { system = "x86_64-linux"; };
  in {

    packages.avr.moonlander-bew0-firmware = let
      zsa-qmk-repo = pkgs.fetchgit {
        url = "https://github.com/zsa/qmk_firmware";
        fetchSubmodules = true;
        sha256 = "sha256-9Gh95yRlcmpZKlXc7Hzgm4VRmpmcfQaSbZFPi2i/veo=";
      };

      # is there a better way to patch a repo?
      zsa-qmk-repo--patched = pkgs.stdenv.mkDerivation {
        name = "zsa-qmk-repo-patched";
        src = zsa-qmk-repo;
        patches = [
          (pkgs.fetchpatch {
            name = "zsa-qmk-repo--nix-requirement-fix.patch";
            url = "https://github.com/qmk/qmk_firmware/commit/650be92cf96440920ebf1079c11f2f36c4a9edc1.patch";
            sha256 = "sha256-YcKsmZwUJS3Czt7pTjdlK08EXWcihTbVRfDkuCMK2Cg=";
          })
        ];
        phases = [ "unpackPhase" "patchPhase" "installPhase" ];
        installPhase = ''
          cd .. # to be able to move current folder
          mv ./$sourceRoot $out
        '';
      };

      # Inspired from: https://github.com/qmk/qmk_firmware/blob/master/shell.nix

      avrlibc = pkgs.pkgsCross.avr.libcCross;
      avr_incflags = [
        "-isystem ${avrlibc}/avr/include"
        "-B${avrlibc}/avr/lib/avr5"
        "-L${avrlibc}/avr/lib/avr5"
        "-B${avrlibc}/avr/lib/avr35"
        "-L${avrlibc}/avr/lib/avr35"
        "-B${avrlibc}/avr/lib/avr51"
        "-L${avrlibc}/avr/lib/avr51"
      ];

      pythonEnv = pkgs.poetry2nix.mkPoetryEnv {
        projectDir = "${zsa-qmk-repo--patched}/util/nix";
        overrides = pkgs.poetry2nix.overrides.withDefaults (self: super: {
          # NOTE: pillow override gotten from:
          # https://github.com/qmk/qmk_firmware/pull/17243
          pillow = super.pillow.overridePythonAttrs(old: {
            # Use preConfigure from nixpkgs to fix library detection issues and
            # impurities which can break the build process; this also requires
            # adding propagatedBuildInputs and buildInputs from the same source.
            propagatedBuildInputs = (old.buildInputs or []) ++ pkgs.python3.pkgs.pillow.propagatedBuildInputs;
            buildInputs = (old.buildInputs or []) ++ pkgs.python3.pkgs.pillow.buildInputs;
            preConfigure = (old.preConfigure or "") + pkgs.python3.pkgs.pillow.preConfigure;
          });
          qmk = super.qmk.overridePythonAttrs(old: {
            # Allow QMK CLI to run "qmk" as a subprocess (the wrapper changes
            # $PATH and breaks these invocations).
            dontWrapPythonPrograms = true;
          });
        });
      };
    in pkgs.stdenv.mkDerivation {
      name = "moonlander-bew0-firmware";

      src = zsa-qmk-repo; # my own code will be copied in it on postUnpack

      AVR_CFLAGS = avr_incflags;
      AVR_ASFLAGS = avr_incflags;

      buildInputs = with pkgs; [ clang-tools dfu-programmer dfu-util diffutils git pythonEnv poetry niv ]
        ++ /* avr toolchain */ [
          pkgs.pkgsCross.avr.buildPackages.binutils
          pkgs.pkgsCross.avr.buildPackages.gcc8
          pkgs.avrdude
          avrlibc

          # no idea why this is needed...
          gcc-arm-embedded # provides arm-none-eabi-gcc
        ];

      postUnpack = ''
        echo "Adding my keymap to qmk's repo"

        # NOTE: At unpack phase, cwd is not yet in the source directory.
        #       Need to mention 'source/' everytime needed!
        cp -r ${./moonlander_bew0_source} ./$sourceRoot/keyboards/moonlander/keymaps/bew0
      '';

      configurePhase = ''
        # Necessary to tell 'qmk' helper program where the qmk repo is.
        # (it's searched by default in $HOME)
        export QMK_HOME=$PWD

        # This fails with minor errors only
        # TODO: is there a way to not fail if only minor errors detected?
        #qmk doctor && echo after qmk doctor
      '';

      buildPhase = ''
        # SKIP_GIT is needed to skip generation of a version.h file, that uses info from git,
        #   since our repo is not a git project ('.git' folder has been removed).
        make moonlander:bew0 SKIP_GIT=1
      '';

      installPhase = ''
        mkdir -p $out
        cp .build/*.hex .build/*.bin $out
      '';
    };

    packages.avr.default = self.packages.avr.moonlander-bew0-firmware;
  };
}
